
import java.util.*;
public class App {

     static Scanner keyboard = new Scanner(System.in);
    //MID TERMS1 Practice
    public static void main(String[] args) throws Exception 
    {
        double c = 32.5;
        System.out.print("Convert Celcius to Falhrenheit: " + c + " becomes ");
        System.out.println(convertToFahrenheit(c));
        //System.out.println("what radius do you want?");
        /*double radius = keyboard.nextDouble();
        printDCA(radius);
        final int N = 4;
        printTriangle(N);
        printTriangle1(N);
        int n = 878777;
        printSeparateLine(n);
        pseudo();
        pseudoGenerateTheSquares(50);
        System.out.println("What floating point number your want?");
        float user = keyboard.nextFloat();
        System.out.println(fractional(user));
        final int N = 1000;
        findPositive(N);
        System.out.print ("Please type a letter A through P or R through Y: ");
        char letter = keyboard.next().charAt(0);
        correspondingDigit(letter);
        //perferNum(6);
        int number1 = 54;
        int number2 = 63;
        int gcd = (GCD(number1, number2));
        System.out.printf("The GCD of %d and %d is %d ", number1, number2, gcd);*/
        fourDigit();

        
        
        
    
    }
    /*the four-digit number 3025 has the following property: if the number formed by 
    considering only the first two digits (30) is added to the number formed by considering only the last two digits (25), 
    the total will be 55, and if this number (55) is squared, the result will be the original number. 
    Develop an algorithm to find all four-digit numbers having this property*/
    private static void fourDigit()
    {
        
        
        for (int i = 1000; i <= 9999; i++){
            int n = i;
            int remandier1, remandier2,finalanswer;
            double result1=0;
            while(n != 0){
                remandier1 = n % 100;
                remandier2 = n /100;
                finalanswer = remandier1 + remandier2;
                result1 = Math.pow(finalanswer, 2);
            }
            if (result1 == n){
                System.out.println(i);
            }
        }
    
    } 
    /*The greatest common divisor (GCD) of two numbers is the largest factor 
    of both numbers. For example, the GCD of 54 and 63 is 9*/
    private static int GCD (int number1, int number2) // greatest common divisor
    {
        int gcd = 0;
        int i = 1;
        while(i <= number1 && i<= number2)
        {
            if(number1%i == 0 & number2 % i ==0)
                gcd = i;
            i++;
        }
        return gcd;
        
    }
    //perfect Num
    private static void perferNum(int number)
    {
        int n = 1;
        int sum = 0;
        while(n < number)
        {
            if(number%n==0)
                sum = sum +n;
            n++;
        }
        if(sum == number)
            System.out.println("perfect number");
        else
            System.out.println("not a perfect number");
    }
    //1) Develop a pseudo code algorithm to tabulate the function 2^n n= 1...50
    private static void pseudo()
    {
        long number = 2;
        long term = 1;
        while(term <= 50.0)
        {
            long result;
            result = (long)Math.pow(number, term);
            System.out.println(result);
            term++;

        }
    }
    /*2) The square of the integers 1, 2, 3, ... can be generated by a method that involves adding successive odd numbers to the previous square, that is:
    1 ^ 2 = 0 ^ 2 + 1 =1 
    2 ^ 2 = 1 ^ 2 + 3 =4 
    3 ^ 2 = 2 ^ 2 + 5 =9 
    or in general
    (k + 1) ^ 2 = k ^ 2 + (2k + 1)
    Develop a pseudo code algorithm which uses this technique to generate the squares of integers from 1 to a given number n*/
    private static void pseudoGenerateTheSquares(int howManyN)
    {
        int k = 0;
        while(k < howManyN)
        {
            int result;
            result =  (int)Math.pow(k, 2) + (2*k +1);//(k + 1) ^ 2 = k ^ 2 + (2k + 1)
            System.out.println(result);
            k++;
        }

    }
    /* Develop a pseudo code algorithm to find all positive integers less than 1000 which do not end 
    in zero and have the property that if the rightmost digit is deleted, the integer obtained divides evenly into the original.
     For example, 39 is such an integer since 3 remains after deleting the rightmost digit and 3 divides 39 evenly.
    Translate the algorithm into a Java method.*/
    private static void findPositive(int n)
    {
        int positiveNum = 1;
        int sum =0;
        while(positiveNum < n)
        {
            if(positiveNum%10!=0)
            {System.out.println(positiveNum);
                sum++;
            }
            positiveNum++;
        }
        System.out.println("There are: " + sum);
    }
    /*Design and write a Java application that takes as input a single letter 
    and displays the corresponding digit on the telephone. 
    The letters and digits on a telephone are grouped this way:
    > 2 = ABC
    > 3 = DEF
    > 4 = GHI 
    > 5  = JKL
    > 6  = MNO 
    > 7 = PRS 
    > 8 = TUV 
    > 9 = WXY*/
    private static int correspondingDigit(char letter)
    {
        
    
     //inputs user response to variable letter
 
    // inner loop of the nested loop
        
        int num = 0;
        if(Character.isLetter(letter))
        {
            if ( letter == 'A' || letter == 'B' || letter == 'C' )
                num = 2;
            else if ( letter == 'D' || letter == 'E' || letter == 'F' )
                num =  3;
                
            else if ( letter == 'G' || letter == 'H' || letter == 'I' )
                num = 4;
                
            else if ( letter == 'J' || letter == 'K' || letter == 'L' )
                num =  5;
                                                                                                        
            else if ( letter == 'M' || letter == 'N' || letter == 'O' )
            num = 6;
                
            else if ( letter == 'P' || letter == 'R' || letter == 'S' )
                num =  7;
                
            else if ( letter == 'T' || letter == 'U' || letter == 'V' )
                num = 8;
                
            else if ( letter == 'W' || letter == 'X' || letter == 'Y' )
                num = 9;
        }
            
        else 
            System.out.println("No digit corresponds ");
        
         
         return num;
    }

    //Write a Java program that takes a floating-point number from the keyboard and prints only its fractional part. 5.1231*10^3, 2.23423*2^8
    private static float fractional(float number)
    {
        float fractional;
        int integer = (int)number;
        fractional = number - integer;
        return fractional;

    }
    /*Develop a pseudo code algorithm to find all positive integers less than 1000 which do not end in zero and
     have the property that if the rightmost digit is deleted, the integer obtained divides evenly into the original. For example, 39 is such an integer since 3 remains after deleting the rightmost digit and 3 divides 39 evenly.
    Translate the algorithm into a Java method. */
    /*private static void findPosive(int limit)
    {
        while()
    }*/

    /*Develop a Javamethodwhich accepts an integer value as an argumentto the method. The methoddisplays
     each digit of the given number on a separate line. For example,if the input to the methodis 749 the output will be 
     9 
     7
     4*/
     private static void printSeparateLine(int num)
     {
         while (num > 0)
         {
             int digit;
             digit = num % 10;
             System.out.println(digit);// module 10 and then store it to somewhere, and then divided by 10. Keep doing until num = 0;
             num /= 10;
         }
        
     }
    /*5) Write a method that accepts an integer as a parameter(e.g.4) and printst he following output:
    1
    12
    123
    1234*/
    private static void printTriangle(int n)
    {
        for(int i = 1; i <= n; i++)
        {
            for(int j = 1; j <= i; j++)
            {
                System.out.print(j);
            }
            System.out.println();
        }
    }
    // using while
    private static void printTriangle1(int n)
    {
        int i = 1;
        int j;
        while(i <= n)
        {
            j = 1;
            while(j <= i)
            {
                System.out.print(j);
                j++;
            }
            i++;
            System.out.println();
        }
    }

    //7 Write a Java method that converts a Celsius temperature to its Fahrenheit equivalent
    private static double convertToFahrenheit(double celcius)
    {
        return (double)9/5 * celcius + 32;

    }
    //8 Write a method to calculate the diameter, the circumference, and the area of a circle for a given radius.
    private static double calculateDiameter(double radius)
    {
        double diameter;
        diameter = radius * 2;
        return diameter;
    }
    private static double calculateCircumference(double radius)
    {
        double circumference;
        circumference = 2 * Math.PI * radius;
        return circumference;
    }
    private static double calculateArea(double radius)
    {
        double area;
        area = Math.PI * (Math.pow(radius, 2));
        return area;
    }
    private static void printDCA(double r)
    {
        System.out.println("The diameter is " + calculateDiameter(r));
        System.out.println("The circumference is " + calculateCircumference(r));
        System.out.println("The area is " + calculateArea(r));
    }
    /*

*/

		

		
}
